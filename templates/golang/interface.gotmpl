{{define "golang/interface"}}// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT
{{$pkg := .}}package client

import ({{range .ServerImports}}
	"{{.}}"{{end}}
)

var ApiDomain string
func ToJson(v interface{}) (r []byte) {
	r, _ = json.Marshal(v)
	return
}
{{range .Interfaces}}{{$interface := .}}
{{with .Constructor}}type {{$interface.Name | title}} struct {
	{{range .Method.Params}}{{.Name | title}} {{.FullGoTypeName}}
	}
{{end}}{{end}}
{{with .Constructor}}
{{else}}
	type {{$interface.Name | title}} struct{}
	var Default{{$interface.Name | title}} = &{{$interface.Name | title}}{}
{{end}}
{{range .Methods}}{{$method := .}}
	{{if .ConstructorForInterface}}
	func (this *{{$interface.Name | title}}) {{$method.Name}}({{$method.ParamsForGoClientFunction}}) ({{$method.ResultsForGoClientFunction}}){
	{{.ConstructorForInterface.Name | snake}} = &{{.ConstructorForInterface.Name | title}}{
		{{range $method.Params}}{{.Name | title}}: {{.Name | snake}},
		{{end}}}
	return
	}
	{{else}}
		type {{$interface.Name | snake}}_{{$method.Name}}_Results struct {
			{{range .Results}}	{{.Name | title}} {{.FullGoTypeName}}
			{{end}}
		}

		func (this *{{$interface.Name | title}}) {{$method.Name}}({{$method.ParamsForGoClientFunction}}) ({{$method.ResultsForGoClientFunction}}){
			bodyMap := make(map[string]interface{})
			bodyMap["This"] = this
			{{if $method.Params}}paramsMap := make(map[string]interface{})
			{{range $method.Params}}paramsMap["{{.Name | title}}"] = {{.Name}}
			{{end}}bodyMap["Params"] = paramsMap{{end}}
			resp, err := http.DefaultClient.Post(ApiDomain+"/{{$interface.Name}}/{{.Name}}.json", "application/json", bytes.NewReader(ToJson(bodyMap)))
			if err != nil {
				return
			}
			if resp.StatusCode >= 300 {
			   	errors.New("http error, status code:" + string(resp.StatusCode) + "status" + resp.Status)
			}
			if resp.Body == nil {
				return
			}
			var result {{$interface.Name | snake}}_{{$method.Name}}_Results
			defer resp.Body.Close()
			dec := json.NewDecoder(resp.Body)
			err = dec.Decode(&result)
			{{range $i ,$r := $method.Results}}{{.Name | snake}} = result.{{.Name | title}}
			{{end}}return
		}{{end}}
{{end}}
{{end}}
{{end}}
